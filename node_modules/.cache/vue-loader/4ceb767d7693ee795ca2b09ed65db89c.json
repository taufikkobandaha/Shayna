{"remainingRequest":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/src/components/BannerShayna.vue?vue&type=template&id=2c25d03c&scoped=true&","dependencies":[{"path":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/src/components/BannerShayna.vue","mtime":1600707304811},{"path":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taufikkobandaha/Documents/Build With Angga/web-shayna/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}